services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.5
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.6.5
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    networks:
      - app-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    ports:
      - "8080:8080"
    networks:
      - app-network

  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
      - "27018:27018"
      - "27019:27019"
    environment:
      MONGO_INITDB_DATABASE: products
    command: ["--replSet", "rs0", "--bind_ip_all"]
    networks:
      - app-network

  mongo-init-replica:
    image: mongo:latest
    depends_on:
      - mongo
    entrypoint: >
      bash -c '
      sleep 10 &&
      until mongosh --host mongo --eval "print(\"waiting for connection\")"; do sleep 1; done &&
      mongosh --host mongo --eval "
        rs.initiate({
          _id: \"rs0\",
          members: [{ _id: 0, host: \"mongo:27017\" }]
        })
      " &&
      mongosh --host mongo --eval "
        db = db.getSiblingDB(\"productsdb\");
        db.createCollection(\"products\");
      "
      '
    networks:
      - app-network

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://mongo:27017/
      ME_CONFIG_BASICAUTH: false
    networks:
      - app-network

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: productsdb
    ports:
      - "5555:5432"
    networks:
      - app-network

  adminer:
    image: adminer:latest
    ports:
      - "8082:8080"
    depends_on:
      - postgres
    networks:
      - app-network

  postgres-init:
    image: postgres:latest
    depends_on:
      - postgres
    environment:
      PGPASSWORD: postgres
    entrypoint: >
      bash -c '
      sleep 10 &&
      until psql -h postgres -U postgres -c "SELECT 1"; do sleep 1; done &&
      psql -h postgres -U postgres -d productsdb -c "
        CREATE TABLE products (
          _id TEXT PRIMARY KEY,
          name TEXT
        );
      "
      '
    networks:
      - app-network

  connector:
    image: quay.io/debezium/connect
    ports:
      - "8083:8083"
    environment:
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: _connect_configs
      OFFSET_STORAGE_TOPIC: _connect_offsets
      STATUS_STORAGE_TOPIC: _connect_status
      BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_PLUGIN_PATH: /kafka/connect,/custom-plugins
    depends_on:
      - zookeeper
      - kafka
    volumes:
      - ./kafka-plugins/custom-psql:/custom-plugins
    networks:
      - app-network

  connect-init:
    image: curlimages/curl:latest
    depends_on:
      - connector
    entrypoint: >
      sh -c '
      sleep 30 &&
      echo "Registering MongoDB Source Connector..." &&
      curl -X POST http://connector:8083/connectors \
        -H "Content-Type: application/json" \
        -d @/scripts/mongo-source-connector.json &&

      echo "Registering JDBC Sink Connector..." &&
      curl -X POST http://connector:8083/connectors \
        -H "Content-Type: application/json" \
        -d @/scripts/jdbc-sink-connector.json
      '
    volumes:
      - ./scripts:/scripts:ro
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
